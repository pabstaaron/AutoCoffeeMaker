
%% bare_conf.tex
%% V1.4b
%% 2015/08/26
%% by Michael Shell
%% See:
%% http://www.michaelshell.org/
%% for current contact information.
%%
%% This is a skeleton file demonstrating the use of IEEEtran.cls
%% (requires IEEEtran.cls version 1.8b or later) with an IEEE
%% conference paper.
%%
%% Support sites:
%% http://www.michaelshell.org/tex/ieeetran/
%% http://www.ctan.org/pkg/ieeetran
%% and
%% http://www.ieee.org/

%%*************************************************************************
%% Legal Notice:
%% This code is offered as-is without any warranty either expressed or
%% implied; without even the implied warranty of MERCHANTABILITY or
%% FITNESS FOR A PARTICULAR PURPOSE! 
%% User assumes all risk.
%% In no event shall the IEEE or any contributor to this code be liable for
%% any damages or losses, including, but not limited to, incidental,
%% consequential, or any other damages, resulting from the use or misuse
%% of any information contained here.
%%
%% All comments are the opinions of their respective authors and are not
%% necessarily endorsed by the IEEE.
%%
%% This work is distributed under the LaTeX Project Public License (LPPL)
%% ( http://www.latex-project.org/ ) version 1.3, and may be freely used,
%% distributed and modified. A copy of the LPPL, version 1.3, is included
%% in the base LaTeX documentation of all distributions of LaTeX released
%% 2003/12/01 or later.
%% Retain all contribution notices and credits.
%% ** Modified files should be clearly indicated as such, including  **
%% ** renaming them and changing author support contact information. **
%%*************************************************************************


% *** Authors should verify (and, if needed, correct) their LaTeX system  ***
% *** with the testflow diagnostic prior to trusting their LaTeX platform ***
% *** with production work. The IEEE's font choices and paper sizes can   ***
% *** trigger bugs that do not appear when using other class files.       ***                          ***
% The testflow support page is at:
% http://www.michaelshell.org/tex/testflow/



\documentclass[conference]{IEEEtran}
\usepackage{url}

%
\ifCLASSINFOpdf
  % \usepackage[pdftex]{graphicx}
  % declare the path(s) where your graphic files are
  % \graphicspath{{../pdf/}{../jpeg/}}
  % and their extensions so you won't have to specify these with
  % every instance of \includegraphics
  % \DeclareGraphicsExtensions{.pdf,.jpeg,.png}
\else
  % or other class option (dvipsone, dvipdf, if not using dvips). graphicx
  % will default to the driver specified in the system graphics.cfg if no
  % driver is specified.
  % \usepackage[dvips]{graphicx}
  % declare the path(s) where your graphic files are
  % \graphicspath{{../eps/}}
  % and their extensions so you won't have to specify these with
  % every instance of \includegraphics
  % \DeclareGraphicsExtensions{.eps}
\fi



% correct bad hyphenation here
\hyphenation{op-tical net-works semi-conduc-tor}


\begin{document}

\title{Senior Project Proposal}


% author names and affiliations
% use a multiple column layout for up to three different
% affiliations
\author{Aaron~Pabst, Ben~Nagel, Nathan~Donaldson, Elliot~CarrLee}
\url{https://pabstaaron.github.io/AutoCoffeeMaker/}

% conference papers do not typically use \thanks and this command
% is locked out in conference mode. If really needed, such as for
% the acknowledgment of grants, issue a \IEEEoverridecommandlockouts
% after \documentclass

% for over three affiliations, or if they all won't fit within the width
% of the page, use this alternative format:
% 
%\author{\IEEEauthorblockN{Michael Shell\IEEEauthorrefmark{1},
%Homer Simpson\IEEEauthorrefmark{2},
%James Kirk\IEEEauthorrefmark{3}, 
%Montgomery Scott\IEEEauthorrefmark{3} and
%Eldon Tyrell\IEEEauthorrefmark{4}}
%\IEEEauthorblockA{\IEEEauthorrefmark{1}School of Electrical and Computer Engineering\\
%Georgia Institute of Technology,
%Atlanta, Georgia 30332--0250\\ Email: see http://www.michaelshell.org/contact.html}
%\IEEEauthorblockA{\IEEEauthorrefmark{2}Twentieth Century Fox, Springfield, USA\\
%Email: homer@thesimpsons.com}
%\IEEEauthorblockA{\IEEEauthorrefmark{3}Starfleet Academy, San Francisco, California 96678-2391\\
%Telephone: (800) 555--1212, Fax: (888) 555--1212}
%\IEEEauthorblockA{\IEEEauthorrefmark{4}Tyrell Inc., 123 Replicant Street, Los Angeles, California 90210--4321}}


% make the title area
\maketitle

% As a general rule, do not put math, special symbols or citations
% in the abstract
\begin{abstract}
Imagine having a machine that would allow you to make the perfect cup of coffee
right in your own home or office, without ever having to trek to the coffee
shop. A machine that allows you to specify exactly how you like your coffee
with exacting detail and optional scheduling at which point it will flawlessly
produce that beverage for you. A machine that can recommend new beverages based
on your and other users’ past preferences.

There are plenty of machines on the market that claim to be fully automatic,
but none are capable of going all the way from raw ingredients to a finished
beverage without any intervention from the user. With these
machines, the user still has to manually froth milk dispense flavoring
syrup, and mix the beverage themselves; the machine only handles the grinding,
tamping, and brewing tasks.
These machines also provide a very limited scope of control to the user, giving them
only a few options for dictating how they would like their coffee to be
produced.
Finally, most of these machines have very limited user interfaces and few have
an option for remote control from a more user friendly device, such as a
smart phone or tablet.

Our product differs by focusing on automation, personalization, and
user-friendliness above all else. Our machine will house all ingredients
internally, receive instructions wirelessly, and will have an automatic
cleaning mechanism. The minimization of human interaction allows us to have
complete control of the brewing and mixing process, allowing us to make a
consistent cup of coffee. This also allows us to operate the machine
wirelessly, allowing for streamlined UI capabilities and scheduled events.
Autonomous control allows you to monitor the machine’s use, personal
consumption habits, and ingredient consumption, while also giving the user the
ability to tweak individual settings to make a personalized and reproducible
cup of coffee. The machine itself will consist of a series of boilers,
chillers, and pumps as well as a specially designed chamber for automatically
frothing milk. These components will be driven from custom heater and chiller
control circuitry as well as an embedded linux controller. The physical device
will be backed by some remote user-interface and a database for storing
ingredient information and user data.
\end{abstract}


% What is the project motivation? 
%
% TODO - Could use a citation or two in here
% TODO - Add more background information
% TODO - There are a couple machines out there that can froth milk on their own,
% but they do so poorly
\section{Introduction} 

There are many espresso machines available for commercial and
consumer applications. The most frequent of which an average consumer will
encounter is the manual espresso machine used by their local coffee shop. These
machines require a substantial amount of training and practice to wield
effectively. The operator must master the skills of grinding the coffee, tamping
grounds, and physically pulling the espresso; tasks that are out of reach for
the average consumer to perform on their own. What's more, the operator must
manually froth milk and dispense an appropriate amount of flavoring syrup for more
complicated bevrages, such as lattes.

However, there are an increasing number of espresso machines on the market that
automate some of this process.  Most of these machines grind beans, tamp the
grounds, and pull the espresso with little intervention from the user. The user,
however, must still manually froth milk (a difficult task to master), deploy
flavoring syrup, and mix the the beverage on their own.
 
There is not presently an \emph{eleqantly} implemented solution for a fully
automated espresso machine that is easy and fast for the average consumer
to use. This is largely due to the fact that there are certain mechanisms and
control systems that would have to be created for such a device that are
non-trivial to design and implement.

The remainder of this document discusses the functionality of various 
modern coffee machines. We then compare our implementation of a fully
automated, web connected espresso machine. The discussion itself will
include the scope of the project, the design approach, some background, 
and time estimates. 

\subsection{How Espresso Machines Work}
% TODO there may be some light plagerism in this section..

There are many different types of coffee makers available. Each of these systems
is unique in its own way and each has its pro's and con's. All coffee makers,
however, have one thing in common; they all must push hot water through ground
coffee beans in some way. In the case of espresso, hot water is heated to a near
boiling temprature and pressurized in some way. This hot water is then forced
through densely packed coffee grounds (known as a ``puck'') in order to produce
a thick, creamy coffee \cite{wikiespresso}.  

There are several different ways in which the water may be pressurized. One of
the most common ways this is accomplished is to simply let the water pressurize
as it heats in a sealed container and turns into steam. Once a suitable
temprature is reached, the container is unsealed and the pressurized water
passes through the puck. This approach is used in most low-end espresso machines
as it requires few mechanical components and is generally inexpensive. It also
tends to produce lower quality espresso as the water pressure is difficult to
regulate and drops as the brewing cycle progresses.

Higher end machines used in most commercial applications use an electric pump to
force the water through the grounds, allowing for tighter control of the
water pressure as well as faster brewing times.

An optional, but important, component of an espresso machine is the frothing
wand. The frothing wand is a hollow shaft of aluminium that is used to direct
high pressure steam into milk (or a milk-like product), the effect of which is
incorporating air into the milk that makes it light and foamy (or frothy, as
the name suggestes). Most modern espresso machines have a built-in frothing
mechanism. On lower end machines, the frothing wand connectes to the same boiler
that produces the brewing water. This is undesirable due to the fact that
frothing water needs to be heated to much higher tempratures than brewing water
in order to produce the necessary high pressure steam. Machines that only have a
single boiler therefore need to introduce a long delay between the brewing and
frothing cycle while the boiler switches from one task to another.

Higher-end machines will generally introduce a second boiler for producing
frothing steam. This boiler will operate at a much higher temprature than the
brewing boiler in order to produce the necessary steam pressure.

Another important task that plays a large role in
producing high quality espresso is the grinding of the beans. While this task
seems simple, there are many factors introduced in griding that can have a large
impact in the flavor and consistency of the final product. 

Coffee for espresso is usually ground to a very fine powder so that it can be
densly packed into a puck. This is subject to personal preferance, however, and some
may prefer the flavor of a coarser grind. In many modern espresso machines, the
grinder is integrated into the machine. Many baristas, however, prefer to use a
seperate grinder to give them more control over the process.

Most grinders used in commercial and upscale domestic applications are burr
grinders. Burr grinders have two vertically aligned steel plates with teeth
(burrs) on them. A hopper containing coffee beans sits above these two plates
and allows coffee beans to fall into the grinder.
The plates are roatated manually or via an electric motor to grind the beans,
which are pushed through the teeth and fall into a collection vessel once they
are split into fine enough pieces.
The space between the plates determines the final fineness of the grind.


% Description of what we expect the final device to be
\section{Project Overview}

This project will culminate in a device that can produce espresso drinks that
consist of varying degrees of espresso, frothed milk, and flavoring syrup. The
device will be cabable of varying parameters that effect the brewing and
frothing processes. The user will be able to define how hot the brewing water
should be, the pressure with which it is pushed through the grounds, how fine of
a grind is used, the ratio of water to coffee grounds, how much steam is used to
froth milk, and how much froth is produced in the milk. The machine will be
fully self-contained and hold its own water, coffee beans, milk, milk
alternative, and flavoring syrup (milk will be held in a refridgerated tank).
The machine will additionally be capable of a degree of self-cleaning and will
be capable of flushing the non-refigerated portion of the frothing system with
detegergent to prevent bacteria build up.

The machine will be internet connected and chanined to a database in which
ingriedent information and collected user data will be stored and processed. The
database will provide the machine with information on how to use certain
ingriedents (for example, it may provide optimal brew settings for a certain
brand of coffee) and recommend beverages and settings to the user.

The machine will be operated by some remote user interface running on an Android
device to allow for a a streamlined user experience.

\subsection{Physical Machine Overview}

The physical espresso machine will consist of a brewing mechanism, a
burr grinder, a tamping mechanism, a frother, several syrup dispensers, and
storage tanks for water, milk and a non-dairy equivalent, and detergent.

\subsubsection{Burr Grinder Specification}
The grinder will be based around flat (rather than conical) burr plates. The
burr plates will first be designed in a 3D CAD system. The plates can then be
fabricated in one of two ways, depending on cost and time constraints. 
The plates may sent to a computer aided-machining service to be milled out of
stainless steel.
The plates may also be 3D printed in plastic. These plastic pieces will then be
molded in silicone or urethane rubber. This mold will be used to slip cast
ceramic (boron carbide, preferably) burrs. These slip cast plates will then need
to be hardened in a kiln. Ceramic burrs have many advantages over steel burrs. 

\subsubsection{Tamping and Brewing Mechanism}
The brewing mechanism will consist of the following major pieces: a boiler for
heating brew water, a peristaltic pump for pushing the water through the
grounds, and a valve for allowing water into the boiler from the storage tank.

\subsubsection{Automatic Frother}

\subsection{User Interface Overview}

\subsection{Data Aggregation and Processing Overview}

% Flask Overview?
%Is it based on other things that have been done?
% Some "do it yourself" projects are out there for homemade coffee machines, 
% but none that are highly sophisticated. There are a few that have mobile application
% controllers, but none that are very pretty to look at or very customizable. By creating
% a simple UI with complex functions, we can personalize each users experience with
% customizable settings and profiles. Creating user profiles will allow us to recommend
% brews based on what has recently been selected by the current user, and what has been
% selected by other users that have similar taste. Searching of other brews other users
% have saved and shared may be selected as well. Scheduling times and days so
% you can wake up to a cup of coffee instead of wasting time making one every
% morning could make the difference between a good and bad morning.
%The above is my outlook on the UI portion (Nathan) Just spitballing ideas.
 
\section{Project Tasks}
% Just guessing here, but in an ideal world this would be the waterfall outward
% Inidividual Components working
% Components Controlled By I2C -> Aaron: At the end of the day, everything will
% be controlled by I2C or SPI
% Components Controlled via USART Serial -> Aaron: unlikely, except for possibly
% a debugging interface
% Components Controlled via Flask API Calls
% Flush out Flask buffer and all calls
%% We probably need a buffering system since the machine throughput will be low
% Flask talking to DB
% Flask talking to Android Device
% DB Pushing valuable data downstream
%Machine talking to Android Device

%Nathan - I want to know if we want both the Android device and coffee machine communicating
%with a web server? Say we connect the coffee machine to wifi, do we just want to be able to connect
%the android device to the coffee machine via bluetooth and just have the info communicate to the phone
%through that? Or do we want to connect to the coffee machine as router (so to speak) and have it recognize
%commands from the app via wifi communication? We could also go the route of just having the phone
%connected to a webserver only and have device just be bluetooth. There are many options actually.


\section{Project Materials}
% Raspberry Pi -> compute module, specifically
%Boilers -> Built from raw materials, stainless steel
%Coils -> Cartridge heaters
%Reservoirs -> Built from raw materials, stainless steel or aluminum
%Custom PCBS
%Various ICs and discretes
% Copper or brass pipes or silicone tubing
% Custom machined pieces from proto labs

\section{Testing Approach}
% Flask
Testing against the Flask microframework part of our project will be heavily reliant on 'mocking'
outputs and inputs of recieved calls. Flask as a microframework does not need to be tested, however
our devices reaction to GPIO eventst needs to be tested. This can be occumplished using the python
unittest.mock framework  \cite{mock} where we can create tests that will 'mock' returned data to
be able to flush out multiple tests without relying on any network or GPIO setup. 


\section{Project Demonstration}
The goal for our project demonstration is that we can show give a user a phone, let him customize a
cup of coffee, and have it make a cup of coffee without anyone user interference. Our demonstration
is meant to be simple, because our project is meant to simplify. If we can walk away from our
machine and still have it function correctly in the hands on people unfamiliar we would completed
what we set out to do.

% \begin{thebibliography}{1}
% 
% \bibitem{IEEEhowto:kopka}
% H.~Kopka and P.~W. Daly, \emph{A Guide to \LaTeX}, 3rd~ed.\hskip 1em plus
%   0.5em minus 0.4em\relax Harlow, England: Addison-Wesley, 1999.
% 
% \end{thebibliography}

\bibliography{biblio}{}
\bibliographystyle{plain}

\end{document}

\end{document}


